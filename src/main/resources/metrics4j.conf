# These two properties are passed in from kairosdb via system properties.
# Changes for these two should be made in kairosdb.conf
metric-prefix: "kairosdb."
kairos-host: "localhost"

metrics4j: {
	_dump-file: "dump.conf"
	plugins: {
		jmx: {
			_class: "org.kairosdb.metrics4j.plugins.JMXReporter"
			type-map: {
				java.lang.Object: "long"
			}
			class-name-attributes: ["type", "name"]
		}
	}

	#kairosdb.jvm.thread_count
	#kairosdb.jvm.max_memory
	#kairosdb.jvm.total_memory
	#kairosdb.jvm.free_memory

	sources: {
		# Default collectors
		_collector: [ "counter", "strings" ]
		_sink: "internal"
		_trigger: "defaultTrigger"
		_tags: {
			host: ${kairos-host}
			#Add additional tags for metrics here
		}
		_disabled: true

		org.kairosdb: {
			# enabled just kairos metrics and a few java jmx metrics
			_disabled: false
		}

		java: {
			lang.Memory: {
				HeapMemoryUsage: {
					_disabled: false
					_formatter: "genericFormatter"
					_metric-name: "jvm.heap_usage"
				}
				NonHeapMemoryUsage: {
					_disabled: false
					_formatter: "genericFormatter"
					_metric-name: "jvm.non_heap_usage"
				}
			}

			lang.Threading.ThreadCount: {
				_disabled: false
				_formatter: "genericFormatter"
				_metric-name: "jvm.thread_count"
			}
		}

		org.kairosdb.core.blast.BlastStats: {
			_formatter: "genericFormatter"
			_metric-name: "blast.submission_count"
		}

		org.kairosdb.core.demo.DemoStats: {
			_formatter: "genericFormatter"
			_metric-name: "demo.submission_count"
		}

		org.kairosdb.core.telnet.TelnetStats: {
			_formatter: "genericFormatter"
			_metric-name: "protocol.telnet_request_count"
		}

		org.kairosdb.filter.FilterStats: {
			_formatter: "genericFormatter"
			_metric-name: "filter.skipped_metrics"
		}

		org.kairosdb.core.queue.QueueStats: {
			_formatter: "queueStatsFormatter"
			batchSize: {
				_collector: "stats"
			}
		}

		org.kairosdb.datastore.cassandra.BatchMetrics: {
			_formatter: "cassandraStatsFormatter"
			_collector: [ "stats" ]
		}

		org.kairosdb.datastore.cassandra.RetryStats: {
			_formatter: "cassandraStatsFormatter"
		}

		org.kairosdb.datastore.cassandra.CassandraClientImpl.ClientMetrics: {

		}

		org.kairosdb.datastore.cassandra.CassandraStats: {
			_formatter: "cassandraStatsFormatter"
			#This reports metrics for every query made individually
			_collector: [ "bag" ]

			#Change the collectors if individual query metrics are getting too much
			#_collector: [ "stats", "timeStats" ]
		}

		org.kairosdb.core.reporting.QueryStats: {
			_formatter: "queryStatsFormatter"
			#This reports metrics for every query made individually
			_collector: [ "bag" ]

			#Change the collectors if individual query metrics are getting too much
			#_collector: [ "stats", "timeStats" ]

			Trace: {
				_formatter: "queryTraceStatsFormatter"
				_collector: [ "strings" ]
				#These are disabled by default as they generate a lot of string data
				#Set this to false to enable trace metrics
				_disabled: true
				_prop: {
					ttl: "86400" #TTL the data after 24hrs
				}
				remoteAddress: {
				}
				json: {
				}
			}
		}

		org.kairosdb.core.http.rest.HttpStats: {
			_formatter: "queryStatsFormatter"
			#This reports metrics for every query made individually
			_collector: [ "bag" ]

			#Change the collectors if individual query metrics are getting too much
			#_collector: [ "stats", "timeStats" ]
		}

		org.kairosdb.core.reporting.DataPointsMonitor: {
			_formatter: "genericFormatter"
			_metric-name: "metric-counters"
		}

		org.kairosdb.core.reporting.JavaMonitor: {
			_formatter: "jvmFormatter"
		}
	}

	sinks: {
		#Defines what sinks to use - where to send the metrics
		internal: {
			_class: "org.kairosdb.metrics.InternalSink"
		}
	}

	collectors: {
		#Defines what collectors will be used and configures them
		counter: {
			_class: "org.kairosdb.metrics4j.collectors.impl.LongCounter"
			reset: true
			report-zero: false
		}

		stats: {
			_class: "org.kairosdb.metrics4j.collectors.impl.SimpleStats"
			report-zero: false
		}

		strings: {
			_class: "org.kairosdb.metrics4j.collectors.impl.StringReporter"
		}

		bag: {
			_class: "org.kairosdb.metrics4j.collectors.impl.BagCollector"
			#Used for reporting durations
			report-unit: "MILLIS"
		}

		timeStats: {
			_class: "org.kairosdb.metrics4j.collectors.impl.SimpleTimerMetric"
			report-unit: "MILLIS"
		}
	}

	formatters: {
		#Can reformat metric names when reporting
		genericFormatter: {
			_class: "org.kairosdb.metrics4j.formatters.TemplateFormatter"
			template: ${metric-prefix}"%{metricName}"
		}

		queueStatsFormatter: {
			_class: "org.kairosdb.metrics4j.formatters.MethodToSnakeCase"
			template: ${metric-prefix}"queue.%{metricName}.%{field}"
		}

		httpStatsFormatter: {
			_class: "org.kairosdb.metrics4j.formatters.MethodToSnakeCase"
			template: ${metric-prefix}"http.%{metricName}.%{field}"
		}

		queryStatsFormatter: {
			_class: "org.kairosdb.metrics4j.formatters.MethodToSnakeCase"
			template: ${metric-prefix}"datastore.%{metricName}.%{field}"
		}

		queryTraceStatsFormatter: {
			_class: "org.kairosdb.metrics4j.formatters.MethodToSnakeCase"
			template: ${metric-prefix}"log.query.%{metricName}"
		}

		cassandraStatsFormatter: {
			_class: "org.kairosdb.metrics4j.formatters.MethodToSnakeCase"
			template: ${metric-prefix}"datastore.cassandra.%{metricName}"
		}

		jvmFormatter: {
			_class: "org.kairosdb.metrics4j.formatters.MethodToSnakeCase"
			template: ${metric-prefix}"jvm.%{metricName}"
		}
	}

	triggers: {
		#determines when to collect metrics
		defaultTrigger: {
			_class: "org.kairosdb.metrics4j.triggers.IntervalTrigger"
			interval: "1m"
		}
	}
}